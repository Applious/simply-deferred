// Generated by CoffeeScript 1.3.1
(function() {
  var PENDING, REJECTED, RESOLVED, actionFor, executeCallbacks, _, _Deferred,
    _this = this;

  _ = require('underscore');

  PENDING = "pending";

  RESOLVED = "resolved";

  REJECTED = "rejected";

  executeCallbacks = function(callbacks, args) {
    var callback, _i, _len, _ref, _results;
    _ref = _.flatten(callbacks);
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      callback = _ref[_i];
      _results.push(callback.apply(null, args));
    }
    return _results;
  };

  actionFor = {};

  actionFor[PENDING] = function(callbacks, holder, closingArgs) {
    return holder.push.apply(holder, _.flatten(callbacks));
  };

  actionFor[RESOLVED] = function(callbacks, holder, closingArgs) {
    return executeCallbacks(callbacks, closingArgs);
  };

  actionFor[REJECTED] = actionFor[RESOLVED];

  _Deferred = (function() {

    _Deferred.name = '_Deferred';

    function _Deferred() {
      var callbackStorage, terminator,
        _this = this;
      this._state = PENDING;
      this._doneCallbacks = [];
      this._failCallbacks = [];
      this._alwaysCallbacks = [];
      this._closingArguments = [];
      this.state = function() {
        return _this._state;
      };
      callbackStorage = function(holder) {
        return function() {
          actionFor[_this._state](arguments, holder, _this._closingArguments);
          return _this;
        };
      };
      this.done = callbackStorage(this._doneCallbacks);
      this.fail = callbackStorage(this._failCallbacks);
      this.always = callbackStorage(this._alwaysCallbacks);
      this.then = callbackStorage(this._alwaysCallbacks);
      terminator = function(targetState, callbackSets) {
        return function() {
          if (_this._state === PENDING) {
            _this._state = targetState;
            _this._closingArguments = arguments;
            executeCallbacks(callbackSets, arguments);
          }
          return _this;
        };
      };
      this.resolve = terminator(RESOLVED, [this._doneCallbacks, this._alwaysCallbacks]);
      this.reject = terminator(REJECTED, [this._failCallbacks, this._alwaysCallbacks]);
    }

    return _Deferred;

  })();

  exports.Deferred = function() {
    return new _Deferred();
  };

}).call(this);
