// Generated by CoffeeScript 1.3.1
(function() {
  var PENDING, REJECTED, RESOLVED, _, _Deferred,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _ = require('underscore');

  PENDING = "pending";

  RESOLVED = "resolved";

  REJECTED = "rejected";

  _Deferred = (function() {

    _Deferred.name = '_Deferred';

    function _Deferred() {
      this.then = __bind(this.then, this);

      this._executeCallbacks = __bind(this._executeCallbacks, this);

      this.always = __bind(this.always, this);

      this.fail = __bind(this.fail, this);

      this.done = __bind(this.done, this);

      this.reject = __bind(this.reject, this);

      this.resolve = __bind(this.resolve, this);

      this._close = __bind(this._close, this);

      this.state = __bind(this.state, this);
      this._state = PENDING;
      this._doneCallbacks = [];
      this._failCallbacks = [];
      this._alwaysCallbacks = [];
      this._closingArguments = [];
    }

    _Deferred.prototype.state = function() {
      return this._state;
    };

    _Deferred.prototype._close = function(newState, callbackSets, args) {
      this._state = newState;
      this._closingArguments = args;
      return this._executeCallbacks(callbackSets, args);
    };

    _Deferred.prototype.resolve = function() {
      if (this._state === PENDING) {
        this._close(RESOLVED, [this._doneCallbacks, this._alwaysCallbacks], arguments);
      }
      return this;
    };

    _Deferred.prototype.reject = function() {
      if (this._state === PENDING) {
        this._close(REJECTED, [this._failCallbacks, this._alwaysCallbacks], arguments);
      }
      return this;
    };

    _Deferred.prototype.done = function() {
      var callbacks, _ref;
      callbacks = _.flatten(arguments);
      if (this._state === PENDING) {
        (_ref = this._doneCallbacks).push.apply(_ref, callbacks);
      }
      if (this._state === RESOLVED) {
        this._executeCallbacks(callbacks, this._closingArguments);
      }
      return this;
    };

    _Deferred.prototype.fail = function() {
      var callbacks, _ref;
      callbacks = _.flatten(arguments);
      if (this._state === PENDING) {
        (_ref = this._failCallbacks).push.apply(_ref, callbacks);
      }
      if (this._state === REJECTED) {
        this._executeCallbacks(callbacks, this._closingArguments);
      }
      return this;
    };

    _Deferred.prototype.always = function() {
      var callbacks, _ref;
      callbacks = _.flatten(arguments);
      if (this._state === PENDING) {
        (_ref = this._alwaysCallbacks).push.apply(_ref, _.flatten(arguments));
      } else {
        this._executeCallbacks(callbacks, this._closingArguments);
      }
      return this;
    };

    _Deferred.prototype._executeCallbacks = function(callbacks, args) {
      var callback, _i, _len, _ref, _results;
      _ref = _.flatten(callbacks);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        callback = _ref[_i];
        _results.push(callback.apply(null, args));
      }
      return _results;
    };

    _Deferred.prototype.then = function() {
      return this.always.apply(this, arguments);
    };

    return _Deferred;

  })();

  exports.Deferred = function() {
    return new _Deferred();
  };

}).call(this);
