// Generated by CoffeeScript 1.3.1
(function() {
  var Deferred, PENDING, REJECTED, RESOLVED, actionFor, callbackStorage, executeCallbacks, terminator, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    _this = this;

  _ = _ || require('underscore');

  PENDING = "pending";

  RESOLVED = "resolved";

  REJECTED = "rejected";

  Deferred = (function() {

    Deferred.name = 'Deferred';

    function Deferred() {
      this.state = __bind(this.state, this);
      this._state = PENDING;
      this._doneCallbacks = [];
      this._failCallbacks = [];
      this._alwaysCallbacks = [];
      this._closingArguments = [];
    }

    Deferred.prototype.state = function() {
      return this._state;
    };

    return Deferred;

  })();

  executeCallbacks = function(callbacks, args) {
    var callback, _i, _len, _ref, _results;
    _ref = _.flatten(callbacks);
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      callback = _ref[_i];
      _results.push(callback.apply(null, args));
    }
    return _results;
  };

  actionFor = {};

  actionFor[PENDING] = function(callbacks, holder, closingArgs) {
    return holder.push.apply(holder, _.flatten(callbacks));
  };

  actionFor[RESOLVED] = function(callbacks, holder, closingArgs) {
    return executeCallbacks(callbacks, closingArgs);
  };

  actionFor[REJECTED] = actionFor[RESOLVED];

  callbackStorage = function(holder) {
    return function() {
      actionFor[this._state](arguments, this[holder], this._closingArguments);
      return this;
    };
  };

  terminator = function(targetState, callbackSetNames) {
    return function() {
      var callbackSets,
        _this = this;
      if (this._state === PENDING) {
        this._state = targetState;
        this._closingArguments = arguments;
        callbackSets = callbackSetNames.map(function(name) {
          return _this[name];
        });
        executeCallbacks(callbackSets, arguments);
      }
      return this;
    };
  };

  Deferred.prototype.resolve = terminator(RESOLVED, ['_doneCallbacks', '_alwaysCallbacks']);

  Deferred.prototype.reject = terminator(REJECTED, ['_failCallbacks', '_alwaysCallbacks']);

  Deferred.prototype.done = callbackStorage('_doneCallbacks');

  Deferred.prototype.fail = callbackStorage('_failCallbacks');

  Deferred.prototype.always = callbackStorage('_alwaysCallbacks');

  Deferred.prototype.then = callbackStorage('_alwaysCallbacks');

  (typeof exports !== "undefined" && exports !== null ? exports : window).Deferred = function() {
    return new Deferred();
  };

}).call(this);
